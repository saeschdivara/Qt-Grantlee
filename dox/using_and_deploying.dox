
namespace Grantlee
{
/**
  @page using_and_deploying Using Grantlee in your application

  Using %Grantlee in Qt applications will often not require much code.

  @code
    Grantlee::Engine *engine = getEngine();
    Template t = engine->loadByName( "mytemplate.html" );
    Context c;
    c.insert( "some_input", some_value );
    browser.setHtml( t->render( c ) );
  @endcode

  Error handling etc is omitted for clarity. In order for the above to work as expected, it is necessary to configure the build system to find %Grantlee, and to configure %Grantlee to find templates and plugins.

  @section finding_with_cmake Finding Grantlee with CMake

  %Grantlee uses the <a href="http://www.cmake.org/">CMake</a> cross platform build system, and installs a cmake file called GrantleeConfig.cmake. This config file is automatically searched for by CMake and contains the information needed for other CMake based applications to find headers and link against %Grantlee libraries.

  When creating an application using CMake that depends on %Grantlee, first issue the find_package command, and then use the CMake variables to include paths to %Grantlee headers and link to the libraries.

  @code
    project(my_application)

    cmake_minimum_required(VERSION 2.8.11)

    set(CMAKE_AUTOMOC ON)
    set(CMAKE_INCLUDE_CURRENT_DIR ON)

    find_package(Grantlee REQUIRED)

    # ... Application sources etc.

    target_link_libraries(
      my_application
      Qt4::QtGui
      ${Grantlee_TEMPLATES_LIBRARIES}
    )
  @endcode

  When %Grantlee is found correctly, it makes the following CMake variables available:
  - Grantlee_FOUND - Set to true if found, false otherwise.
  - Grantlee_INCLUDE_DIR - Set to the directory where the %Grantlee headers are located. Applications can then \#include &lt;grantlee/engine.h&gt;
  - Grantlee_TEMPLATES_LIBRARIES - Set to the location of the installed version of the grantlee_core library.
  - Grantlee_TEXTDOCUMENT_LIBRARIES - Set to the location of the installed version of the grantlee_gui library.
  - Grantlee_USE_FILE - Set to the path to the GrantleeUse.cmake file.
  - Grantlee_VERSION_MAJOR - The major version number of %Grantlee.
  - Grantlee_VERSION_MINOR - The minor version number of %Grantlee.
  - Grantlee_VERSION_PATCH - The patch version number of %Grantlee.

  @section deploying_templates Deploying Templates

  %Template files can be installed by your application and must later be found by %Grantlee so they can be used. If the files are installed on the filesystem, the path they were installed to can be specified when creating a TemplateLoader.

  @code
    Engine* getEngine()
    {
      Engine *engine = new Engine( this );

      FileSystemTemplateLoader::Ptr loader = FileSystemTemplateLoader::Ptr( new FileSystemTemplateLoader() );
      loader->setTemplateDirs( QStringList() << path_to_installed_templates );

      engine->addTemplateLoader( loader );
      return engine;
    }
  @endcode

  It is also possible to compile the templates into a <a href="http://qt.nokia.com/doc/4.5/resources.html">Qt Resource</a> file and set the resource URL on the TemplateLoader.

  @code
    # my_app_templates.qrc:
    <!DOCTYPE RCC><RCC version="1.0">
    <qresource>
        <file>mybasetemplate.html</file>
        <file>mytemplate.html</file>
        <file>myothertemplate.html</file>
    </qresource>
    </RCC>

    # CMake code:
    set (_rcc_file "my_app_templates.qrc")
    qt5_add_resources(_template_rcc_src ${_rcc_file} OPTIONS -root "/templates/" )

    add_executable(my_app, ${my_app_srcs} ${_template_rcc_src})

    # Application code:
    FileSystemTemplateLoader::Ptr loader = FileSystemTemplateLoader::Ptr( new FileSystemTemplateLoader() );
    loader->setTemplateDirs( QStringList() << ":/templates/" );

    engine->addTemplateLoader( loader );
  @endcode

  The <tt>-root</tt> option passed to rcc in CMake causes the templates to be in the virtual filesystem location &quot;<tt>:/grantlee/mytemplate.html</tt>&quot; etc. This name spacing helps keep independent data in the virtual filesystem separate.

  @section finding_user_templates Finding user defined templates

  If users are able to define their own templates in an application that uses %Grantlee for theming for example, the path to the location of such potential templates must also be set through the TemplateLoader. Paths to user defined templates should be defined before default/installed templates so that the user templates are found first. If there is a reason to disallow user overriding of certain templates, they can be specified in a separate TemplateLoader.

  @code
    FileSystemTemplateLoader::Ptr no_override_loader = FileSystemTemplateLoader::Ptr( new FileSystemTemplateLoader() );
    no_override_loader->setTemplateDirs( QStringList() << path_to_non_overridable_templates );

    engine->addTemplateLoader( no_override_loader );

    FileSystemTemplateLoader::Ptr override_loader = FileSystemTemplateLoader::Ptr( new FileSystemTemplateLoader() );
    override_loader->setTemplateDirs( QStringList() << path_to_user_templates << path_to_default_templates );

    engine->addTemplateLoader( override_loader );
  @endcode

  Additionally, the <a href="http://qt.nokia.com/doc/4.5/resources.html#external-binary-resources">External binary resources</a> feature could be used to allow savvy users to share themes/templates in a package, or to deploy updated templates easily to existing deployed applications.

  @section finding_plugins Finding tags and filters

  Grantlee looks for plugins in the paths from the Engines pluginPath property. It does so
  in the same order they appear there.

  The property defaults to the following directories
    - The default plugin directory of your qt installation (qmake -query QT_INSTALL_PLUGINS).
    - The directories specified in the environment variable QT_PLUGIN_DIR.
    - The default plugin directory of your grantlee installation.

  Each path has <tt>&quot;grantlee/$version/&quot;</tt> appended to it, and the resulting
  directory is searched for plugins. For example, if the version of %Grantlee is 0.2 and
  QCoreApplication::libraryPaths() contains <tt>&quot;/usr/lib/plugins/&quot;</tt>, the directory
  <tt>&quot;/usr/lib/plugins/grantlee/0.2&quot;</tt> would be searched for plugins. The search
  stops when a plugin matching a particular name is found.

  The paths used to search for plugins can be overriden by using Engine::setPluginPaths. If you
  just want to add some additional paths use Engine::addPluginPath. The added path will be
  prepended to the list of search paths.

  @section deploying_custom_plugins Deploying custom tags and filters

  Custom tags and filters can be defined in C++ code or in QtScript.

  To create a custom C++ plugin it must be built as part of a library and installed in a location known to the application.

  @code
    # CMake code

    include(${Grantlee_USE_FILE}) # This files defines the grantlee_add_plugin macro

    grantlee_add_plugin(my_custom_plugin
      custom_plugin_library

      TAGS
        custom_tag1
        custom_tag2
        custom_tag3
      FILTERS
        custom_filter1
        custom_filter2
        custom_filter3
    )

    install(TARGETS my_custom_plugin
            RUNTIME DESTINATION ${PLUGIN_INSTALL_DIR}
            LIBRARY DESTINATION ${PLUGIN_INSTALL_DIR}
            ARCHIVE DESTINATION ${LIB_INSTALL_DIR}
            COMPONENT Devel
    )
  @endcode

  In this case, my_custom_plugin is a name used for the plugin in the CMake environment. It is used to install the custom library in the install command.

  <tt>custom_plugin_library.cpp</tt> is the C++ file where you implement the Grantlee::TagLibaryInterface to return custom tags and filters. The custom tags and filters files are given with the TAGS and FILTERS arguments to the macro. Note that moc is not run on the headers of files given in the FILTERS argument, and is run on the headers of files given in the TAGS argument (custom_tag1.h etc) and on the main library file, in this case custom_plugin_library.h.

  Note that the PLUGIN_INSTALL_DIR given to the install command should contain the version number of %Grantlee used to create the custom library. For example, <tt>/usr/share/my_app/plugins/grantlee/0.1/</tt>.

  In C++ code, it is necessary to either instruct the Grantlee::Engine about the location of the plugins or to configure your QCoreApplication::libraryPaths by another standard method. Note that it is possible to define custom versions of built in tags and filters by putting your own plugin library in the path before the path to the default %Grantlee plugins.

  For example, if your custom plugin library contained a custom implementation of the @gr_tag{for} tag:
  @code
    Engine *engine = new Engine( this );
    engine->setPluginPaths( QStringList() << path_to_custom_plugins << path_to_grantlee_defaults );
  @endcode

  Note that neither the path to the custom libarary nor the path to the %Grantlee default library should contain the version number when specified in C++ code with the Engine. The version is only specified when installing the plugin in CMake.

  Custom tags and filters implemented in QtScript can also be deployed on the file system, or, like template files, can also be deployed in Qt Resource files. In that case, the version should be specified in the -root argument in CMake.

  @code
    # CMake code:
    set (_rcc_file "my_qtscript_library.qrc")
    qt5_add_resources(_scripted_rcc_src ${_rcc_file} OPTIONS -root "/plugins/grantlee/${Grantlee_VERSION_MAJOR}.${Grantlee_VERSION_MINOR}" )

    add_executable(my_app, ${my_app_srcs} ${_scripted_rcc_src})

    # C++ code:
    engine->setPluginPaths( QStringList() << ":/plugins/" );
  @endcode

  Note again that when specifying the path in the virtual filesystem, the version is omitted. User defined filter written in QtScript can also be located similiarly to templates from either the filesystem or the Qt Resource virtual filesystem.

  @section building_grantlee Building Grantlee

  It is possible to build only parts of %Grantlee if your application is a QCoreApplication that depends only on QtCore

  <center>
  <b>
  @dotfile "moduledeps.dot" "Dependency Graph for Grantlee"
  </b>

  <b>
  @dotfile "plugindeps.dot" "Dependency Graph for Grantlee plugins"
  </b>
  </center>

  The appropriate options may be specified in the cmake gui, or on the command line.

  @code
    mkdir build && cd build
    cmake .. -DBUILD_GUI:BOOL=OFF -DBUILD_TESTS:BOOL=OFF -DBUILD_SCRIPT_PLUGIN:BOOL=OFF
  @endcode

  Similarly, it is possible to build only grantlee_gui standalone

  @code
    mkdir build && cd build
    cmake .. -DBUILD_CORE:BOOL=OFF -DBUILD_TESTS:BOOL=OFF -DBUILD_MAIN_PLUGINS:BOOL=OFF -DBUILD_SCRIPT_PLUGIN:BOOL=OFF
  @endcode

*/
}
